% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mst.with.endpoints.R
\name{mst.with.endpoints}
\alias{mst.with.endpoints}
\title{Create a minimum spanning tree with known endpoints}
\usage{
mst.with.endpoints(dmat, endpoints, allow.dyads = FALSE, error = TRUE)
}
\arguments{
\item{dmat}{A symmetric adjacency matrix where each row/column is a node.
Each entry represents the edge weight between the corresponding nodes;
however, no edge is formed when the weight is zero.
This should have non-\code{NULL} dimnames.}

\item{endpoints}{A character vector specifying the nodes to be set as endpoints.}

\item{allow.dyads}{Logical scalar indicating whether dyads (i.e., two-node subcomponents between endpoints) are allowed.}

\item{error}{Logical scalar indicating whether an error should be raised if no tree satisfies the constraints.}
}
\value{
A \link{graph} object containing the minimum spanning tree (or forest, if \code{allow.dyads=TRUE}).
This may also be \code{NULL} if \code{error=FALSE} and no tree can be found that satisfies the constraints.
}
\description{
Create a minimum spanning tree where certain nodes are forced to be endpoints, i.e., of degree 1.
}
\details{
Pretty much as the name suggests, this function will search for the minimum spanning tree with endpoint constraints.
For most part, this involves removing the endpoints, identifying the MST from the remaining non-endpoint nodes,
and then connecting the endpoints to the closest non-endpoint node to create the full MST.

However, if \code{allow.dyads=TRUE}, it is also possible to form edges between two endpoints.
These will form their own subcomponent of the graph, named here as a \dQuote{dyad}.
The function will perform an exhaustive search for the optimal configuration of edges from endpoints if dyads are allowed.

Note that there are actually two edges connecting the endpoints in a dyad;
both are counted when computing the MST and both are reported in the output graph.
This avoids the loss of an edge, which would otherwise result in a large drop in the distance and encourage formation of inappropriate dyads.

In some situations, it is impossible to construct a tree, e.g., for an odd number of nodes that are all endpoints.
This will result in an error being raised.
Users can set \code{error=FALSE} to return a \code{NULL} instead to handle the error state in their own code.
}
\examples{
coords <- rbind(A=c(0,0), B=c(1,-1), C=c(1, 1))
dmat <- as.matrix(dist(coords))

mst.with.endpoints(dmat, endpoints=NULL)
mst.with.endpoints(dmat, endpoints="A")
mst.with.endpoints(dmat, endpoints="B")

mst.with.endpoints(dmat, endpoints=c("A", "B"))
try(mst.with.endpoints(dmat, endpoints=c("A", "B", "C")))

# Sometimes MSTs are only possible when dyads are allowed to form.
coords <- rbind(A=c(0,0), B=c(1,-1), C=c(1, 1), D=c(-1, 0))
dmat <- as.matrix(dist(coords))
try(mst.with.endpoints(dmat, endpoints=c("A", "B", "C", "D")))
mst.with.endpoints(dmat, endpoints=c("A", "B", "C", "D"), allow.dyads=TRUE)

}
\seealso{
\code{\link{minimum.spanning.tree}}, for the version of this function \emph{sans} the endpoint considerations.

\code{\link{createClusterMST}}, where this function gets used.
}
\author{
Aaron Lun
}
